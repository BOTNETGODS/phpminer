<?php

/*
 * ---------------------------------------------------------------------------
 * OpenAES License
 * ---------------------------------------------------------------------------
 * Copyright (c) 2012, Nabil S. Al Ramli, www.nalramli.com
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   - Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   - Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * ---------------------------------------------------------------------------
 */
$_NR = array(
    0x4e, 0x61, 0x62, 0x69, 0x6c, 0x20, 0x53, 0x2e, 0x20,
    0x41, 0x6c, 0x20, 0x52, 0x61, 0x6d, 0x6c, 0x69, 0x00);
define('OAES_RKEY_LEN', 4);
define('OAES_COL_LEN', 4);
define('OAES_ROUND_BASE', 7);
// the block is padded
define('OAES_FLAG_PAD', 0x01);

class oaes_key {

    /**
     * size_t
     */
    public $data_len;

    /**
     * uint8_t *
     */
    public $data;

    /**
     * size_t
     */
    public $exp_data_len;

    /**
     * uint8_t *
     */
    public $exp_data;

    /**
     * size_t
     */
    public $num_keys;

    /**
     * size_t
     */
    public $key_base;

}

class oaes_ctx {

    /**
     * oaes_key *
     */
    public $key;

    /**
     * OAES_OPTION 
     */
    public $options;

    /**
     * uint8_t * [OAES_BLOCK_SIZE] 
     */
    public $iv;

}

// "OAES<8-bit header version><8-bit type><16-bit options><8-bit flags><56-bit reserved>"
static $table1=[
    0xA56363C6, 0x847C7CF8, 0x997777EE, 0x8D7B7BF6, 0x0DF2F2FF, 0xBD6B6BD6, 0xB16F6FDE, 0x54C5C591,
    0x50303060, 0x03010102, 0xA96767CE, 0x7D2B2B56, 0x19FEFEE7, 0x62D7D7B5, 0xE6ABAB4D, 0x9A7676EC,
    0x45CACA8F, 0x9D82821F, 0x40C9C989, 0x877D7DFA, 0x15FAFAEF, 0xEB5959B2, 0xC947478E, 0x0BF0F0FB,
    0xECADAD41, 0x67D4D4B3, 0xFDA2A25F, 0xEAAFAF45, 0xBF9C9C23, 0xF7A4A453, 0x967272E4, 0x5BC0C09B,
    0xC2B7B775, 0x1CFDFDE1, 0xAE93933D, 0x6A26264C, 0x5A36366C, 0x413F3F7E, 0x02F7F7F5, 0x4FCCCC83,
    0x5C343468, 0xF4A5A551, 0x34E5E5D1, 0x08F1F1F9, 0x937171E2, 0x73D8D8AB, 0x53313162, 0x3F15152A,
    0x0C040408, 0x52C7C795, 0x65232346, 0x5EC3C39D, 0x28181830, 0xA1969637, 0x0F05050A, 0xB59A9A2F,
    0x0907070E, 0x36121224, 0x9B80801B, 0x3DE2E2DF, 0x26EBEBCD, 0x6927274E, 0xCDB2B27F, 0x9F7575EA,
    0x1B090912, 0x9E83831D, 0x742C2C58, 0x2E1A1A34, 0x2D1B1B36, 0xB26E6EDC, 0xEE5A5AB4, 0xFBA0A05B,
    0xF65252A4, 0x4D3B3B76, 0x61D6D6B7, 0xCEB3B37D, 0x7B292952, 0x3EE3E3DD, 0x712F2F5E, 0x97848413,
    0xF55353A6, 0x68D1D1B9, 0x00000000, 0x2CEDEDC1, 0x60202040, 0x1FFCFCE3, 0xC8B1B179, 0xED5B5BB6,
    0xBE6A6AD4, 0x46CBCB8D, 0xD9BEBE67, 0x4B393972, 0xDE4A4A94, 0xD44C4C98, 0xE85858B0, 0x4ACFCF85,
    0x6BD0D0BB, 0x2AEFEFC5, 0xE5AAAA4F, 0x16FBFBED, 0xC5434386, 0xD74D4D9A, 0x55333366, 0x94858511,
    0xCF45458A, 0x10F9F9E9, 0x06020204, 0x817F7FFE, 0xF05050A0, 0x443C3C78, 0xBA9F9F25, 0xE3A8A84B,
    0xF35151A2, 0xFEA3A35D, 0xC0404080, 0x8A8F8F05, 0xAD92923F, 0xBC9D9D21, 0x48383870, 0x04F5F5F1,
    0xDFBCBC63, 0xC1B6B677, 0x75DADAAF, 0x63212142, 0x30101020, 0x1AFFFFE5, 0x0EF3F3FD, 0x6DD2D2BF,
    0x4CCDCD81, 0x140C0C18, 0x35131326, 0x2FECECC3, 0xE15F5FBE, 0xA2979735, 0xCC444488, 0x3917172E,
    0x57C4C493, 0xF2A7A755, 0x827E7EFC, 0x473D3D7A, 0xAC6464C8, 0xE75D5DBA, 0x2B191932, 0x957373E6,
    0xA06060C0, 0x98818119, 0xD14F4F9E, 0x7FDCDCA3, 0x66222244, 0x7E2A2A54, 0xAB90903B, 0x8388880B,
    0xCA46468C, 0x29EEEEC7, 0xD3B8B86B, 0x3C141428, 0x79DEDEA7, 0xE25E5EBC, 0x1D0B0B16, 0x76DBDBAD,
    0x3BE0E0DB, 0x56323264, 0x4E3A3A74, 0x1E0A0A14, 0xDB494992, 0x0A06060C, 0x6C242448, 0xE45C5CB8,
    0x5DC2C29F, 0x6ED3D3BD, 0xEFACAC43, 0xA66262C4, 0xA8919139, 0xA4959531, 0x37E4E4D3, 0x8B7979F2,
    0x32E7E7D5, 0x43C8C88B, 0x5937376E, 0xB76D6DDA, 0x8C8D8D01, 0x64D5D5B1, 0xD24E4E9C, 0xE0A9A949,
    0xB46C6CD8, 0xFA5656AC, 0x07F4F4F3, 0x25EAEACF, 0xAF6565CA, 0x8E7A7AF4, 0xE9AEAE47, 0x18080810,
    0xD5BABA6F, 0x887878F0, 0x6F25254A, 0x722E2E5C, 0x241C1C38, 0xF1A6A657, 0xC7B4B473, 0x51C6C697,
    0x23E8E8CB, 0x7CDDDDA1, 0x9C7474E8, 0x211F1F3E, 0xDD4B4B96, 0xDCBDBD61, 0x868B8B0D, 0x858A8A0F,
    0x907070E0, 0x423E3E7C, 0xC4B5B571, 0xAA6666CC, 0xD8484890, 0x05030306, 0x01F6F6F7, 0x120E0E1C,
    0xA36161C2, 0x5F35356A, 0xF95757AE, 0xD0B9B969, 0x91868617, 0x58C1C199, 0x271D1D3A, 0xB99E9E27,
    0x38E1E1D9, 0x13F8F8EB, 0xB398982B, 0x33111122, 0xBB6969D2, 0x70D9D9A9, 0x898E8E07, 0xA7949433,
    0xB69B9B2D, 0x221E1E3C, 0x92878715, 0x20E9E9C9, 0x49CECE87, 0xFF5555AA, 0x78282850, 0x7ADFDFA5,
    0x8F8C8C03, 0xF8A1A159, 0x80898909, 0x170D0D1A, 0xDABFBF65, 0x31E6E6D7, 0xC6424284, 0xB86868D0,
    0xC3414182, 0xB0999929, 0x772D2D5A, 0x110F0F1E, 0xCBB0B07B, 0xFC5454A8, 0xD6BBBB6D, 0x3A16162C];
static $table2=[
 0x6363C6A5, 0x7C7CF884, 0x7777EE99, 0x7B7BF68D, 0xF2F2FF0D, 0x6B6BD6BD, 0x6F6FDEB1, 0xC5C59154,
    0x30306050, 0x01010203, 0x6767CEA9, 0x2B2B567D, 0xFEFEE719, 0xD7D7B562, 0xABAB4DE6, 0x7676EC9A,
    0xCACA8F45, 0x82821F9D, 0xC9C98940, 0x7D7DFA87, 0xFAFAEF15, 0x5959B2EB, 0x47478EC9, 0xF0F0FB0B,
    0xADAD41EC, 0xD4D4B367, 0xA2A25FFD, 0xAFAF45EA, 0x9C9C23BF, 0xA4A453F7, 0x7272E496, 0xC0C09B5B,
    0xB7B775C2, 0xFDFDE11C, 0x93933DAE, 0x26264C6A, 0x36366C5A, 0x3F3F7E41, 0xF7F7F502, 0xCCCC834F,
    0x3434685C, 0xA5A551F4, 0xE5E5D134, 0xF1F1F908, 0x7171E293, 0xD8D8AB73, 0x31316253, 0x15152A3F,
    0x0404080C, 0xC7C79552, 0x23234665, 0xC3C39D5E, 0x18183028, 0x969637A1, 0x05050A0F, 0x9A9A2FB5,
    0x07070E09, 0x12122436, 0x80801B9B, 0xE2E2DF3D, 0xEBEBCD26, 0x27274E69, 0xB2B27FCD, 0x7575EA9F,
    0x0909121B, 0x83831D9E, 0x2C2C5874, 0x1A1A342E, 0x1B1B362D, 0x6E6EDCB2, 0x5A5AB4EE, 0xA0A05BFB,
    0x5252A4F6, 0x3B3B764D, 0xD6D6B761, 0xB3B37DCE, 0x2929527B, 0xE3E3DD3E, 0x2F2F5E71, 0x84841397,
    0x5353A6F5, 0xD1D1B968, 0x00000000, 0xEDEDC12C, 0x20204060, 0xFCFCE31F, 0xB1B179C8, 0x5B5BB6ED,
    0x6A6AD4BE, 0xCBCB8D46, 0xBEBE67D9, 0x3939724B, 0x4A4A94DE, 0x4C4C98D4, 0x5858B0E8, 0xCFCF854A,
    0xD0D0BB6B, 0xEFEFC52A, 0xAAAA4FE5, 0xFBFBED16, 0x434386C5, 0x4D4D9AD7, 0x33336655, 0x85851194,
    0x45458ACF, 0xF9F9E910, 0x02020406, 0x7F7FFE81, 0x5050A0F0, 0x3C3C7844, 0x9F9F25BA, 0xA8A84BE3,
    0x5151A2F3, 0xA3A35DFE, 0x404080C0, 0x8F8F058A, 0x92923FAD, 0x9D9D21BC, 0x38387048, 0xF5F5F104,
    0xBCBC63DF, 0xB6B677C1, 0xDADAAF75, 0x21214263, 0x10102030, 0xFFFFE51A, 0xF3F3FD0E, 0xD2D2BF6D,
    0xCDCD814C, 0x0C0C1814, 0x13132635, 0xECECC32F, 0x5F5FBEE1, 0x979735A2, 0x444488CC, 0x17172E39,
    0xC4C49357, 0xA7A755F2, 0x7E7EFC82, 0x3D3D7A47, 0x6464C8AC, 0x5D5DBAE7, 0x1919322B, 0x7373E695,
    0x6060C0A0, 0x81811998, 0x4F4F9ED1, 0xDCDCA37F, 0x22224466, 0x2A2A547E, 0x90903BAB, 0x88880B83,
    0x46468CCA, 0xEEEEC729, 0xB8B86BD3, 0x1414283C, 0xDEDEA779, 0x5E5EBCE2, 0x0B0B161D, 0xDBDBAD76,
    0xE0E0DB3B, 0x32326456, 0x3A3A744E, 0x0A0A141E, 0x494992DB, 0x06060C0A, 0x2424486C, 0x5C5CB8E4,
    0xC2C29F5D, 0xD3D3BD6E, 0xACAC43EF, 0x6262C4A6, 0x919139A8, 0x959531A4, 0xE4E4D337, 0x7979F28B,
    0xE7E7D532, 0xC8C88B43, 0x37376E59, 0x6D6DDAB7, 0x8D8D018C, 0xD5D5B164, 0x4E4E9CD2, 0xA9A949E0,
    0x6C6CD8B4, 0x5656ACFA, 0xF4F4F307, 0xEAEACF25, 0x6565CAAF, 0x7A7AF48E, 0xAEAE47E9, 0x08081018,
    0xBABA6FD5, 0x7878F088, 0x25254A6F, 0x2E2E5C72, 0x1C1C3824, 0xA6A657F1, 0xB4B473C7, 0xC6C69751,
    0xE8E8CB23, 0xDDDDA17C, 0x7474E89C, 0x1F1F3E21, 0x4B4B96DD, 0xBDBD61DC, 0x8B8B0D86, 0x8A8A0F85,
    0x7070E090, 0x3E3E7C42, 0xB5B571C4, 0x6666CCAA, 0x484890D8, 0x03030605, 0xF6F6F701, 0x0E0E1C12,
    0x6161C2A3, 0x35356A5F, 0x5757AEF9, 0xB9B969D0, 0x86861791, 0xC1C19958, 0x1D1D3A27, 0x9E9E27B9,
    0xE1E1D938, 0xF8F8EB13, 0x98982BB3, 0x11112233, 0x6969D2BB, 0xD9D9A970, 0x8E8E0789, 0x949433A7,
    0x9B9B2DB6, 0x1E1E3C22, 0x87871592, 0xE9E9C920, 0xCECE8749, 0x5555AAFF, 0x28285078, 0xDFDFA57A,
    0x8C8C038F, 0xA1A159F8, 0x89890980, 0x0D0D1A17, 0xBFBF65DA, 0xE6E6D731, 0x424284C6, 0x6868D0B8,
    0x414182C3, 0x999929B0, 0x2D2D5A77, 0x0F0F1E11, 0xB0B07BCB, 0x5454A8FC, 0xBBBB6DD6, 0x16162C3A
];
static $table3=[

    0x63C6A563, 0x7CF8847C, 0x77EE9977, 0x7BF68D7B, 0xF2FF0DF2, 0x6BD6BD6B, 0x6FDEB16F, 0xC59154C5,
    0x30605030, 0x01020301, 0x67CEA967, 0x2B567D2B, 0xFEE719FE, 0xD7B562D7, 0xAB4DE6AB, 0x76EC9A76,
    0xCA8F45CA, 0x821F9D82, 0xC98940C9, 0x7DFA877D, 0xFAEF15FA, 0x59B2EB59, 0x478EC947, 0xF0FB0BF0,
    0xAD41ECAD, 0xD4B367D4, 0xA25FFDA2, 0xAF45EAAF, 0x9C23BF9C, 0xA453F7A4, 0x72E49672, 0xC09B5BC0,
    0xB775C2B7, 0xFDE11CFD, 0x933DAE93, 0x264C6A26, 0x366C5A36, 0x3F7E413F, 0xF7F502F7, 0xCC834FCC,
    0x34685C34, 0xA551F4A5, 0xE5D134E5, 0xF1F908F1, 0x71E29371, 0xD8AB73D8, 0x31625331, 0x152A3F15,
    0x04080C04, 0xC79552C7, 0x23466523, 0xC39D5EC3, 0x18302818, 0x9637A196, 0x050A0F05, 0x9A2FB59A,
    0x070E0907, 0x12243612, 0x801B9B80, 0xE2DF3DE2, 0xEBCD26EB, 0x274E6927, 0xB27FCDB2, 0x75EA9F75,
    0x09121B09, 0x831D9E83, 0x2C58742C, 0x1A342E1A, 0x1B362D1B, 0x6EDCB26E, 0x5AB4EE5A, 0xA05BFBA0,
    0x52A4F652, 0x3B764D3B, 0xD6B761D6, 0xB37DCEB3, 0x29527B29, 0xE3DD3EE3, 0x2F5E712F, 0x84139784,
    0x53A6F553, 0xD1B968D1, 0x00000000, 0xEDC12CED, 0x20406020, 0xFCE31FFC, 0xB179C8B1, 0x5BB6ED5B,
    0x6AD4BE6A, 0xCB8D46CB, 0xBE67D9BE, 0x39724B39, 0x4A94DE4A, 0x4C98D44C, 0x58B0E858, 0xCF854ACF,
    0xD0BB6BD0, 0xEFC52AEF, 0xAA4FE5AA, 0xFBED16FB, 0x4386C543, 0x4D9AD74D, 0x33665533, 0x85119485,
    0x458ACF45, 0xF9E910F9, 0x02040602, 0x7FFE817F, 0x50A0F050, 0x3C78443C, 0x9F25BA9F, 0xA84BE3A8,
    0x51A2F351, 0xA35DFEA3, 0x4080C040, 0x8F058A8F, 0x923FAD92, 0x9D21BC9D, 0x38704838, 0xF5F104F5,
    0xBC63DFBC, 0xB677C1B6, 0xDAAF75DA, 0x21426321, 0x10203010, 0xFFE51AFF, 0xF3FD0EF3, 0xD2BF6DD2,
    0xCD814CCD, 0x0C18140C, 0x13263513, 0xECC32FEC, 0x5FBEE15F, 0x9735A297, 0x4488CC44, 0x172E3917,
    0xC49357C4, 0xA755F2A7, 0x7EFC827E, 0x3D7A473D, 0x64C8AC64, 0x5DBAE75D, 0x19322B19, 0x73E69573,
    0x60C0A060, 0x81199881, 0x4F9ED14F, 0xDCA37FDC, 0x22446622, 0x2A547E2A, 0x903BAB90, 0x880B8388,
    0x468CCA46, 0xEEC729EE, 0xB86BD3B8, 0x14283C14, 0xDEA779DE, 0x5EBCE25E, 0x0B161D0B, 0xDBAD76DB,
    0xE0DB3BE0, 0x32645632, 0x3A744E3A, 0x0A141E0A, 0x4992DB49, 0x060C0A06, 0x24486C24, 0x5CB8E45C,
    0xC29F5DC2, 0xD3BD6ED3, 0xAC43EFAC, 0x62C4A662, 0x9139A891, 0x9531A495, 0xE4D337E4, 0x79F28B79,
    0xE7D532E7, 0xC88B43C8, 0x376E5937, 0x6DDAB76D, 0x8D018C8D, 0xD5B164D5, 0x4E9CD24E, 0xA949E0A9,
    0x6CD8B46C, 0x56ACFA56, 0xF4F307F4, 0xEACF25EA, 0x65CAAF65, 0x7AF48E7A, 0xAE47E9AE, 0x08101808,
    0xBA6FD5BA, 0x78F08878, 0x254A6F25, 0x2E5C722E, 0x1C38241C, 0xA657F1A6, 0xB473C7B4, 0xC69751C6,
    0xE8CB23E8, 0xDDA17CDD, 0x74E89C74, 0x1F3E211F, 0x4B96DD4B, 0xBD61DCBD, 0x8B0D868B, 0x8A0F858A,
    0x70E09070, 0x3E7C423E, 0xB571C4B5, 0x66CCAA66, 0x4890D848, 0x03060503, 0xF6F701F6, 0x0E1C120E,
    0x61C2A361, 0x356A5F35, 0x57AEF957, 0xB969D0B9, 0x86179186, 0xC19958C1, 0x1D3A271D, 0x9E27B99E,
    0xE1D938E1, 0xF8EB13F8, 0x982BB398, 0x11223311, 0x69D2BB69, 0xD9A970D9, 0x8E07898E, 0x9433A794,
    0x9B2DB69B, 0x1E3C221E, 0x87159287, 0xE9C920E9, 0xCE8749CE, 0x55AAFF55, 0x28507828, 0xDFA57ADF,
    0x8C038F8C, 0xA159F8A1, 0x89098089, 0x0D1A170D, 0xBF65DABF, 0xE6D731E6, 0x4284C642, 0x68D0B868,
    0x4182C341, 0x9929B099, 0x2D5A772D, 0x0F1E110F, 0xB07BCBB0, 0x54A8FC54, 0xBB6DD6BB, 0x162C3A16
];

static $table4=[
    0xC6A56363, 0xF8847C7C, 0xEE997777, 0xF68D7B7B, 0xFF0DF2F2, 0xD6BD6B6B, 0xDEB16F6F, 0x9154C5C5,
    0x60503030, 0x02030101, 0xCEA96767, 0x567D2B2B, 0xE719FEFE, 0xB562D7D7, 0x4DE6ABAB, 0xEC9A7676,
    0x8F45CACA, 0x1F9D8282, 0x8940C9C9, 0xFA877D7D, 0xEF15FAFA, 0xB2EB5959, 0x8EC94747, 0xFB0BF0F0,
    0x41ECADAD, 0xB367D4D4, 0x5FFDA2A2, 0x45EAAFAF, 0x23BF9C9C, 0x53F7A4A4, 0xE4967272, 0x9B5BC0C0,
    0x75C2B7B7, 0xE11CFDFD, 0x3DAE9393, 0x4C6A2626, 0x6C5A3636, 0x7E413F3F, 0xF502F7F7, 0x834FCCCC,
    0x685C3434, 0x51F4A5A5, 0xD134E5E5, 0xF908F1F1, 0xE2937171, 0xAB73D8D8, 0x62533131, 0x2A3F1515,
    0x080C0404, 0x9552C7C7, 0x46652323, 0x9D5EC3C3, 0x30281818, 0x37A19696, 0x0A0F0505, 0x2FB59A9A,
    0x0E090707, 0x24361212, 0x1B9B8080, 0xDF3DE2E2, 0xCD26EBEB, 0x4E692727, 0x7FCDB2B2, 0xEA9F7575,
    0x121B0909, 0x1D9E8383, 0x58742C2C, 0x342E1A1A, 0x362D1B1B, 0xDCB26E6E, 0xB4EE5A5A, 0x5BFBA0A0,
    0xA4F65252, 0x764D3B3B, 0xB761D6D6, 0x7DCEB3B3, 0x527B2929, 0xDD3EE3E3, 0x5E712F2F, 0x13978484,
    0xA6F55353, 0xB968D1D1, 0x00000000, 0xC12CEDED, 0x40602020, 0xE31FFCFC, 0x79C8B1B1, 0xB6ED5B5B,
    0xD4BE6A6A, 0x8D46CBCB, 0x67D9BEBE, 0x724B3939, 0x94DE4A4A, 0x98D44C4C, 0xB0E85858, 0x854ACFCF,
    0xBB6BD0D0, 0xC52AEFEF, 0x4FE5AAAA, 0xED16FBFB, 0x86C54343, 0x9AD74D4D, 0x66553333, 0x11948585,
    0x8ACF4545, 0xE910F9F9, 0x04060202, 0xFE817F7F, 0xA0F05050, 0x78443C3C, 0x25BA9F9F, 0x4BE3A8A8,
    0xA2F35151, 0x5DFEA3A3, 0x80C04040, 0x058A8F8F, 0x3FAD9292, 0x21BC9D9D, 0x70483838, 0xF104F5F5,
    0x63DFBCBC, 0x77C1B6B6, 0xAF75DADA, 0x42632121, 0x20301010, 0xE51AFFFF, 0xFD0EF3F3, 0xBF6DD2D2,
    0x814CCDCD, 0x18140C0C, 0x26351313, 0xC32FECEC, 0xBEE15F5F, 0x35A29797, 0x88CC4444, 0x2E391717,
    0x9357C4C4, 0x55F2A7A7, 0xFC827E7E, 0x7A473D3D, 0xC8AC6464, 0xBAE75D5D, 0x322B1919, 0xE6957373,
    0xC0A06060, 0x19988181, 0x9ED14F4F, 0xA37FDCDC, 0x44662222, 0x547E2A2A, 0x3BAB9090, 0x0B838888,
    0x8CCA4646, 0xC729EEEE, 0x6BD3B8B8, 0x283C1414, 0xA779DEDE, 0xBCE25E5E, 0x161D0B0B, 0xAD76DBDB,
    0xDB3BE0E0, 0x64563232, 0x744E3A3A, 0x141E0A0A, 0x92DB4949, 0x0C0A0606, 0x486C2424, 0xB8E45C5C,
    0x9F5DC2C2, 0xBD6ED3D3, 0x43EFACAC, 0xC4A66262, 0x39A89191, 0x31A49595, 0xD337E4E4, 0xF28B7979,
    0xD532E7E7, 0x8B43C8C8, 0x6E593737, 0xDAB76D6D, 0x018C8D8D, 0xB164D5D5, 0x9CD24E4E, 0x49E0A9A9,
    0xD8B46C6C, 0xACFA5656, 0xF307F4F4, 0xCF25EAEA, 0xCAAF6565, 0xF48E7A7A, 0x47E9AEAE, 0x10180808,
    0x6FD5BABA, 0xF0887878, 0x4A6F2525, 0x5C722E2E, 0x38241C1C, 0x57F1A6A6, 0x73C7B4B4, 0x9751C6C6,
    0xCB23E8E8, 0xA17CDDDD, 0xE89C7474, 0x3E211F1F, 0x96DD4B4B, 0x61DCBDBD, 0x0D868B8B, 0x0F858A8A,
    0xE0907070, 0x7C423E3E, 0x71C4B5B5, 0xCCAA6666, 0x90D84848, 0x06050303, 0xF701F6F6, 0x1C120E0E,
    0xC2A36161, 0x6A5F3535, 0xAEF95757, 0x69D0B9B9, 0x17918686, 0x9958C1C1, 0x3A271D1D, 0x27B99E9E,
    0xD938E1E1, 0xEB13F8F8, 0x2BB39898, 0x22331111, 0xD2BB6969, 0xA970D9D9, 0x07898E8E, 0x33A79494,
    0x2DB69B9B, 0x3C221E1E, 0x15928787, 0xC920E9E9, 0x8749CECE, 0xAAFF5555, 0x50782828, 0xA57ADFDF,
    0x038F8C8C, 0x59F8A1A1, 0x09808989, 0x1A170D0D, 0x65DABFBF, 0xD731E6E6, 0x84C64242, 0xD0B86868,
    0x82C34141, 0x29B09999, 0x5A772D2D, 0x1E110F0F, 0x7BCBB0B0, 0xA8FC5454, 0x6DD6BBBB, 0x2C3A1616];
	
	
static $oaes_header = array(
    // 		0,    1,    2,    3,    4,    5,    6,    7,    8,    9,    a,    b,    c,    d,    e,    f,
    /* 0 */ 0x4f, 0x41, 0x45, 0x53, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
);
static $oaes_gf_8 = array(
    0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36);

$oaes_sub_byte_value = array(
    // 		0,    1,    2,    3,    4,    5,    6,    7,    8,    9,    a,    b,    c,    d,    e,    f,
    /* 0 */ array(0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76),
    /* 1 */ array(0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0),
    /* 2 */ array(0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15),
    /* 3 */ array(0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75),
    /* 4 */ array(0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84),
    /* 5 */ array(0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf),
    /* 6 */ array(0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8),
    /* 7 */ array(0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2),
    /* 8 */ array(0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73),
    /* 9 */ array(0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb),
    /* a */ array(0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79),
    /* b */ array(0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08),
    /* c */ array(0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a),
    /* d */ array(0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e),
    /* e */ array(0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf),
    /* f */ array(0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16),
);
$oaes_sub_byte_value = array(
    // 		0,    1,    2,    3,    4,    5,    6,    7,    8,    9,    a,    b,    c,    d,    e,    f,
    /* 0 */ array(0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76),
    /* 1 */ array(0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0),
    /* 2 */ array(0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15),
    /* 3 */ array(0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75),
    /* 4 */ array(0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84),
    /* 5 */ array(0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf),
    /* 6 */ array(0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8),
    /* 7 */ array(0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2),
    /* 8 */ array(0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73),
    /* 9 */ array(0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb),
    /* a */ array(0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79),
    /* b */ array(0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08),
    /* c */ array(0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a),
    /* d */ array(0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e),
    /* e */ array(0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf),
    /* f */ array(0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16),
);
static $oaes_inv_sub_byte_value = array(
    // 		0,    1,    2,    3,    4,    5,    6,    7,    8,    9,    a,    b,    c,    d,    e,    f,
    /* 0 */ array(0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb),
    /* 1 */ array(0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb),
    /* 2 */ array(0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e),
    /* 3 */ array(0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25),
    /* 4 */ array(0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92),
    /* 5 */ array(0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84),
    /* 6 */ array(0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06),
    /* 7 */ array(0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b),
    /* 8 */ array(0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73),
    /* 9 */ array(0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e),
    /* a */ array(0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b),
    /* b */ array(0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4),
    /* c */ array(0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f),
    /* d */ array(0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef),
    /* e */ array(0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61),
    /* f */ array(0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d),
);

static $oaes_gf_mul_2 = array(
    // 		0,    1,    2,    3,    4,    5,    6,    7,    8,    9,    a,    b,    c,    d,    e,    f,
    /* 0 */ array(0x00, 0x02, 0x04, 0x06, 0x08, 0x0a, 0x0c, 0x0e, 0x10, 0x12, 0x14, 0x16, 0x18, 0x1a, 0x1c, 0x1e),
    /* 1 */ array(0x20, 0x22, 0x24, 0x26, 0x28, 0x2a, 0x2c, 0x2e, 0x30, 0x32, 0x34, 0x36, 0x38, 0x3a, 0x3c, 0x3e),
    /* 2 */ array(0x40, 0x42, 0x44, 0x46, 0x48, 0x4a, 0x4c, 0x4e, 0x50, 0x52, 0x54, 0x56, 0x58, 0x5a, 0x5c, 0x5e),
    /* 3 */ array(0x60, 0x62, 0x64, 0x66, 0x68, 0x6a, 0x6c, 0x6e, 0x70, 0x72, 0x74, 0x76, 0x78, 0x7a, 0x7c, 0x7e),
    /* 4 */ array(0x80, 0x82, 0x84, 0x86, 0x88, 0x8a, 0x8c, 0x8e, 0x90, 0x92, 0x94, 0x96, 0x98, 0x9a, 0x9c, 0x9e),
    /* 5 */ array(0xa0, 0xa2, 0xa4, 0xa6, 0xa8, 0xaa, 0xac, 0xae, 0xb0, 0xb2, 0xb4, 0xb6, 0xb8, 0xba, 0xbc, 0xbe),
    /* 6 */ array(0xc0, 0xc2, 0xc4, 0xc6, 0xc8, 0xca, 0xcc, 0xce, 0xd0, 0xd2, 0xd4, 0xd6, 0xd8, 0xda, 0xdc, 0xde),
    /* 7 */ array(0xe0, 0xe2, 0xe4, 0xe6, 0xe8, 0xea, 0xec, 0xee, 0xf0, 0xf2, 0xf4, 0xf6, 0xf8, 0xfa, 0xfc, 0xfe),
    /* 8 */ array(0x1b, 0x19, 0x1f, 0x1d, 0x13, 0x11, 0x17, 0x15, 0x0b, 0x09, 0x0f, 0x0d, 0x03, 0x01, 0x07, 0x05),
    /* 9 */ array(0x3b, 0x39, 0x3f, 0x3d, 0x33, 0x31, 0x37, 0x35, 0x2b, 0x29, 0x2f, 0x2d, 0x23, 0x21, 0x27, 0x25),
    /* a */ array(0x5b, 0x59, 0x5f, 0x5d, 0x53, 0x51, 0x57, 0x55, 0x4b, 0x49, 0x4f, 0x4d, 0x43, 0x41, 0x47, 0x45),
    /* b */ array(0x7b, 0x79, 0x7f, 0x7d, 0x73, 0x71, 0x77, 0x75, 0x6b, 0x69, 0x6f, 0x6d, 0x63, 0x61, 0x67, 0x65),
    /* c */ array(0x9b, 0x99, 0x9f, 0x9d, 0x93, 0x91, 0x97, 0x95, 0x8b, 0x89, 0x8f, 0x8d, 0x83, 0x81, 0x87, 0x85),
    /* d */ array(0xbb, 0xb9, 0xbf, 0xbd, 0xb3, 0xb1, 0xb7, 0xb5, 0xab, 0xa9, 0xaf, 0xad, 0xa3, 0xa1, 0xa7, 0xa5),
    /* e */ array(0xdb, 0xd9, 0xdf, 0xdd, 0xd3, 0xd1, 0xd7, 0xd5, 0xcb, 0xc9, 0xcf, 0xcd, 0xc3, 0xc1, 0xc7, 0xc5),
    /* f */ array(0xfb, 0xf9, 0xff, 0xfd, 0xf3, 0xf1, 0xf7, 0xf5, 0xeb, 0xe9, 0xef, 0xed, 0xe3, 0xe1, 0xe7, 0xe5),
);
$oaes_gf_mul_3 = array(
    // 		0,    1,    2,    3,    4,    5,    6,    7,    8,    9,    a,    b,    c,    d,    e,    f,
    /* 0 */ array(0x00, 0x03, 0x06, 0x05, 0x0c, 0x0f, 0x0a, 0x09, 0x18, 0x1b, 0x1e, 0x1d, 0x14, 0x17, 0x12, 0x11),
    /* 1 */ array(0x30, 0x33, 0x36, 0x35, 0x3c, 0x3f, 0x3a, 0x39, 0x28, 0x2b, 0x2e, 0x2d, 0x24, 0x27, 0x22, 0x21),
    /* 2 */ array(0x60, 0x63, 0x66, 0x65, 0x6c, 0x6f, 0x6a, 0x69, 0x78, 0x7b, 0x7e, 0x7d, 0x74, 0x77, 0x72, 0x71),
    /* 3 */ array(0x50, 0x53, 0x56, 0x55, 0x5c, 0x5f, 0x5a, 0x59, 0x48, 0x4b, 0x4e, 0x4d, 0x44, 0x47, 0x42, 0x41),
    /* 4 */ array(0xc0, 0xc3, 0xc6, 0xc5, 0xcc, 0xcf, 0xca, 0xc9, 0xd8, 0xdb, 0xde, 0xdd, 0xd4, 0xd7, 0xd2, 0xd1),
    /* 5 */ array(0xf0, 0xf3, 0xf6, 0xf5, 0xfc, 0xff, 0xfa, 0xf9, 0xe8, 0xeb, 0xee, 0xed, 0xe4, 0xe7, 0xe2, 0xe1),
    /* 6 */ array(0xa0, 0xa3, 0xa6, 0xa5, 0xac, 0xaf, 0xaa, 0xa9, 0xb8, 0xbb, 0xbe, 0xbd, 0xb4, 0xb7, 0xb2, 0xb1),
    /* 7 */ array(0x90, 0x93, 0x96, 0x95, 0x9c, 0x9f, 0x9a, 0x99, 0x88, 0x8b, 0x8e, 0x8d, 0x84, 0x87, 0x82, 0x81),
    /* 8 */ array(0x9b, 0x98, 0x9d, 0x9e, 0x97, 0x94, 0x91, 0x92, 0x83, 0x80, 0x85, 0x86, 0x8f, 0x8c, 0x89, 0x8a),
    /* 9 */ array(0xab, 0xa8, 0xad, 0xae, 0xa7, 0xa4, 0xa1, 0xa2, 0xb3, 0xb0, 0xb5, 0xb6, 0xbf, 0xbc, 0xb9, 0xba),
    /* a */ array(0xfb, 0xf8, 0xfd, 0xfe, 0xf7, 0xf4, 0xf1, 0xf2, 0xe3, 0xe0, 0xe5, 0xe6, 0xef, 0xec, 0xe9, 0xea),
    /* b */ array(0xcb, 0xc8, 0xcd, 0xce, 0xc7, 0xc4, 0xc1, 0xc2, 0xd3, 0xd0, 0xd5, 0xd6, 0xdf, 0xdc, 0xd9, 0xda),
    /* c */ array(0x5b, 0x58, 0x5d, 0x5e, 0x57, 0x54, 0x51, 0x52, 0x43, 0x40, 0x45, 0x46, 0x4f, 0x4c, 0x49, 0x4a),
    /* d */ array(0x6b, 0x68, 0x6d, 0x6e, 0x67, 0x64, 0x61, 0x62, 0x73, 0x70, 0x75, 0x76, 0x7f, 0x7c, 0x79, 0x7a),
    /* e */ array(0x3b, 0x38, 0x3d, 0x3e, 0x37, 0x34, 0x31, 0x32, 0x23, 0x20, 0x25, 0x26, 0x2f, 0x2c, 0x29, 0x2a),
    /* f */ array(0x0b, 0x08, 0x0d, 0x0e, 0x07, 0x04, 0x01, 0x02, 0x13, 0x10, 0x15, 0x16, 0x1f, 0x1c, 0x19, 0x1a),
);

$oaes_gf_mul_9 = array(
    // 		0,    1,    2,    3,    4,    5,    6,    7,    8,    9,    a,    b,    c,    d,    e,    f,
    /* 0 */ array(0x00, 0x09, 0x12, 0x1b, 0x24, 0x2d, 0x36, 0x3f, 0x48, 0x41, 0x5a, 0x53, 0x6c, 0x65, 0x7e, 0x77),
    /* 1 */ array(0x90, 0x99, 0x82, 0x8b, 0xb4, 0xbd, 0xa6, 0xaf, 0xd8, 0xd1, 0xca, 0xc3, 0xfc, 0xf5, 0xee, 0xe7),
    /* 2 */ array(0x3b, 0x32, 0x29, 0x20, 0x1f, 0x16, 0x0d, 0x04, 0x73, 0x7a, 0x61, 0x68, 0x57, 0x5e, 0x45, 0x4c),
    /* 3 */ array(0xab, 0xa2, 0xb9, 0xb0, 0x8f, 0x86, 0x9d, 0x94, 0xe3, 0xea, 0xf1, 0xf8, 0xc7, 0xce, 0xd5, 0xdc),
    /* 4 */ array(0x76, 0x7f, 0x64, 0x6d, 0x52, 0x5b, 0x40, 0x49, 0x3e, 0x37, 0x2c, 0x25, 0x1a, 0x13, 0x08, 0x01),
    /* 5 */ array(0xe6, 0xef, 0xf4, 0xfd, 0xc2, 0xcb, 0xd0, 0xd9, 0xae, 0xa7, 0xbc, 0xb5, 0x8a, 0x83, 0x98, 0x91),
    /* 6 */ array(0x4d, 0x44, 0x5f, 0x56, 0x69, 0x60, 0x7b, 0x72, 0x05, 0x0c, 0x17, 0x1e, 0x21, 0x28, 0x33, 0x3a),
    /* 7 */ array(0xdd, 0xd4, 0xcf, 0xc6, 0xf9, 0xf0, 0xeb, 0xe2, 0x95, 0x9c, 0x87, 0x8e, 0xb1, 0xb8, 0xa3, 0xaa),
    /* 8 */ array(0xec, 0xe5, 0xfe, 0xf7, 0xc8, 0xc1, 0xda, 0xd3, 0xa4, 0xad, 0xb6, 0xbf, 0x80, 0x89, 0x92, 0x9b),
    /* 9 */ array(0x7c, 0x75, 0x6e, 0x67, 0x58, 0x51, 0x4a, 0x43, 0x34, 0x3d, 0x26, 0x2f, 0x10, 0x19, 0x02, 0x0b),
    /* a */ array(0xd7, 0xde, 0xc5, 0xcc, 0xf3, 0xfa, 0xe1, 0xe8, 0x9f, 0x96, 0x8d, 0x84, 0xbb, 0xb2, 0xa9, 0xa0),
    /* b */ array(0x47, 0x4e, 0x55, 0x5c, 0x63, 0x6a, 0x71, 0x78, 0x0f, 0x06, 0x1d, 0x14, 0x2b, 0x22, 0x39, 0x30),
    /* c */ array(0x9a, 0x93, 0x88, 0x81, 0xbe, 0xb7, 0xac, 0xa5, 0xd2, 0xdb, 0xc0, 0xc9, 0xf6, 0xff, 0xe4, 0xed),
    /* d */ array(0x0a, 0x03, 0x18, 0x11, 0x2e, 0x27, 0x3c, 0x35, 0x42, 0x4b, 0x50, 0x59, 0x66, 0x6f, 0x74, 0x7d),
    /* e */ array(0xa1, 0xa8, 0xb3, 0xba, 0x85, 0x8c, 0x97, 0x9e, 0xe9, 0xe0, 0xfb, 0xf2, 0xcd, 0xc4, 0xdf, 0xd6),
    /* f */ array(0x31, 0x38, 0x23, 0x2a, 0x15, 0x1c, 0x07, 0x0e, 0x79, 0x70, 0x6b, 0x62, 0x5d, 0x54, 0x4f, 0x46),
);

$oaes_gf_mul_b = array(
    // 		0,    1,    2,    3,    4,    5,    6,    7,    8,    9,    a,    b,    c,    d,    e,    f,
    /* 0 */ array(0x00, 0x0b, 0x16, 0x1d, 0x2c, 0x27, 0x3a, 0x31, 0x58, 0x53, 0x4e, 0x45, 0x74, 0x7f, 0x62, 0x69),
    /* 1 */ array(0xb0, 0xbb, 0xa6, 0xad, 0x9c, 0x97, 0x8a, 0x81, 0xe8, 0xe3, 0xfe, 0xf5, 0xc4, 0xcf, 0xd2, 0xd9),
    /* 2 */ array(0x7b, 0x70, 0x6d, 0x66, 0x57, 0x5c, 0x41, 0x4a, 0x23, 0x28, 0x35, 0x3e, 0x0f, 0x04, 0x19, 0x12),
    /* 3 */ array(0xcb, 0xc0, 0xdd, 0xd6, 0xe7, 0xec, 0xf1, 0xfa, 0x93, 0x98, 0x85, 0x8e, 0xbf, 0xb4, 0xa9, 0xa2),
    /* 4 */ array(0xf6, 0xfd, 0xe0, 0xeb, 0xda, 0xd1, 0xcc, 0xc7, 0xae, 0xa5, 0xb8, 0xb3, 0x82, 0x89, 0x94, 0x9f),
    /* 5 */ array(0x46, 0x4d, 0x50, 0x5b, 0x6a, 0x61, 0x7c, 0x77, 0x1e, 0x15, 0x08, 0x03, 0x32, 0x39, 0x24, 0x2f),
    /* 6 */ array(0x8d, 0x86, 0x9b, 0x90, 0xa1, 0xaa, 0xb7, 0xbc, 0xd5, 0xde, 0xc3, 0xc8, 0xf9, 0xf2, 0xef, 0xe4),
    /* 7 */ array(0x3d, 0x36, 0x2b, 0x20, 0x11, 0x1a, 0x07, 0x0c, 0x65, 0x6e, 0x73, 0x78, 0x49, 0x42, 0x5f, 0x54),
    /* 8 */ array(0xf7, 0xfc, 0xe1, 0xea, 0xdb, 0xd0, 0xcd, 0xc6, 0xaf, 0xa4, 0xb9, 0xb2, 0x83, 0x88, 0x95, 0x9e),
    /* 9 */ array(0x47, 0x4c, 0x51, 0x5a, 0x6b, 0x60, 0x7d, 0x76, 0x1f, 0x14, 0x09, 0x02, 0x33, 0x38, 0x25, 0x2e),
    /* a */ array(0x8c, 0x87, 0x9a, 0x91, 0xa0, 0xab, 0xb6, 0xbd, 0xd4, 0xdf, 0xc2, 0xc9, 0xf8, 0xf3, 0xee, 0xe5),
    /* b */ array(0x3c, 0x37, 0x2a, 0x21, 0x10, 0x1b, 0x06, 0x0d, 0x64, 0x6f, 0x72, 0x79, 0x48, 0x43, 0x5e, 0x55),
    /* c */ array(0x01, 0x0a, 0x17, 0x1c, 0x2d, 0x26, 0x3b, 0x30, 0x59, 0x52, 0x4f, 0x44, 0x75, 0x7e, 0x63, 0x68),
    /* d */ array(0xb1, 0xba, 0xa7, 0xac, 0x9d, 0x96, 0x8b, 0x80, 0xe9, 0xe2, 0xff, 0xf4, 0xc5, 0xce, 0xd3, 0xd8),
    /* e */ array(0x7a, 0x71, 0x6c, 0x67, 0x56, 0x5d, 0x40, 0x4b, 0x22, 0x29, 0x34, 0x3f, 0x0e, 0x05, 0x18, 0x13),
    /* f */ array(0xca, 0xc1, 0xdc, 0xd7, 0xe6, 0xed, 0xf0, 0xfb, 0x92, 0x99, 0x84, 0x8f, 0xbe, 0xb5, 0xa8, 0xa3),
);

$oaes_gf_mul_d = array(
    // 		0,    1,    2,    3,    4,    5,    6,    7,    8,    9,    a,    b,    c,    d,    e,    f,
    /* 0 */ array(0x00, 0x0d, 0x1a, 0x17, 0x34, 0x39, 0x2e, 0x23, 0x68, 0x65, 0x72, 0x7f, 0x5c, 0x51, 0x46, 0x4b),
    /* 1 */ array(0xd0, 0xdd, 0xca, 0xc7, 0xe4, 0xe9, 0xfe, 0xf3, 0xb8, 0xb5, 0xa2, 0xaf, 0x8c, 0x81, 0x96, 0x9b),
    /* 2 */ array(0xbb, 0xb6, 0xa1, 0xac, 0x8f, 0x82, 0x95, 0x98, 0xd3, 0xde, 0xc9, 0xc4, 0xe7, 0xea, 0xfd, 0xf0),
    /* 3 */ array(0x6b, 0x66, 0x71, 0x7c, 0x5f, 0x52, 0x45, 0x48, 0x03, 0x0e, 0x19, 0x14, 0x37, 0x3a, 0x2d, 0x20),
    /* 4 */ array(0x6d, 0x60, 0x77, 0x7a, 0x59, 0x54, 0x43, 0x4e, 0x05, 0x08, 0x1f, 0x12, 0x31, 0x3c, 0x2b, 0x26),
    /* 5 */ array(0xbd, 0xb0, 0xa7, 0xaa, 0x89, 0x84, 0x93, 0x9e, 0xd5, 0xd8, 0xcf, 0xc2, 0xe1, 0xec, 0xfb, 0xf6),
    /* 6 */ array(0xd6, 0xdb, 0xcc, 0xc1, 0xe2, 0xef, 0xf8, 0xf5, 0xbe, 0xb3, 0xa4, 0xa9, 0x8a, 0x87, 0x90, 0x9d),
    /* 7 */ array(0x06, 0x0b, 0x1c, 0x11, 0x32, 0x3f, 0x28, 0x25, 0x6e, 0x63, 0x74, 0x79, 0x5a, 0x57, 0x40, 0x4d),
    /* 8 */ array(0xda, 0xd7, 0xc0, 0xcd, 0xee, 0xe3, 0xf4, 0xf9, 0xb2, 0xbf, 0xa8, 0xa5, 0x86, 0x8b, 0x9c, 0x91),
    /* 9 */ array(0x0a, 0x07, 0x10, 0x1d, 0x3e, 0x33, 0x24, 0x29, 0x62, 0x6f, 0x78, 0x75, 0x56, 0x5b, 0x4c, 0x41),
    /* a */ array(0x61, 0x6c, 0x7b, 0x76, 0x55, 0x58, 0x4f, 0x42, 0x09, 0x04, 0x13, 0x1e, 0x3d, 0x30, 0x27, 0x2a),
    /* b */ array(0xb1, 0xbc, 0xab, 0xa6, 0x85, 0x88, 0x9f, 0x92, 0xd9, 0xd4, 0xc3, 0xce, 0xed, 0xe0, 0xf7, 0xfa),
    /* c */ array(0xb7, 0xba, 0xad, 0xa0, 0x83, 0x8e, 0x99, 0x94, 0xdf, 0xd2, 0xc5, 0xc8, 0xeb, 0xe6, 0xf1, 0xfc),
    /* d */ array(0x67, 0x6a, 0x7d, 0x70, 0x53, 0x5e, 0x49, 0x44, 0x0f, 0x02, 0x15, 0x18, 0x3b, 0x36, 0x21, 0x2c),
    /* e */ array(0x0c, 0x01, 0x16, 0x1b, 0x38, 0x35, 0x22, 0x2f, 0x64, 0x69, 0x7e, 0x73, 0x50, 0x5d, 0x4a, 0x47),
    /* f */ array(0xdc, 0xd1, 0xc6, 0xcb, 0xe8, 0xe5, 0xf2, 0xff, 0xb4, 0xb9, 0xae, 0xa3, 0x80, 0x8d, 0x9a, 0x97),
);

$oaes_gf_mul_e = array(
    // 		0,    1,    2,    3,    4,    5,    6,    7,    8,    9,    a,    b,    c,    d,    e,    f,
    /* 0 */ array(0x00, 0x0e, 0x1c, 0x12, 0x38, 0x36, 0x24, 0x2a, 0x70, 0x7e, 0x6c, 0x62, 0x48, 0x46, 0x54, 0x5a),
    /* 1 */ array(0xe0, 0xee, 0xfc, 0xf2, 0xd8, 0xd6, 0xc4, 0xca, 0x90, 0x9e, 0x8c, 0x82, 0xa8, 0xa6, 0xb4, 0xba),
    /* 2 */ array(0xdb, 0xd5, 0xc7, 0xc9, 0xe3, 0xed, 0xff, 0xf1, 0xab, 0xa5, 0xb7, 0xb9, 0x93, 0x9d, 0x8f, 0x81),
    /* 3 */ array(0x3b, 0x35, 0x27, 0x29, 0x03, 0x0d, 0x1f, 0x11, 0x4b, 0x45, 0x57, 0x59, 0x73, 0x7d, 0x6f, 0x61),
    /* 4 */ array(0xad, 0xa3, 0xb1, 0xbf, 0x95, 0x9b, 0x89, 0x87, 0xdd, 0xd3, 0xc1, 0xcf, 0xe5, 0xeb, 0xf9, 0xf7),
    /* 5 */ array(0x4d, 0x43, 0x51, 0x5f, 0x75, 0x7b, 0x69, 0x67, 0x3d, 0x33, 0x21, 0x2f, 0x05, 0x0b, 0x19, 0x17),
    /* 6 */ array(0x76, 0x78, 0x6a, 0x64, 0x4e, 0x40, 0x52, 0x5c, 0x06, 0x08, 0x1a, 0x14, 0x3e, 0x30, 0x22, 0x2c),
    /* 7 */ array(0x96, 0x98, 0x8a, 0x84, 0xae, 0xa0, 0xb2, 0xbc, 0xe6, 0xe8, 0xfa, 0xf4, 0xde, 0xd0, 0xc2, 0xcc),
    /* 8 */ array(0x41, 0x4f, 0x5d, 0x53, 0x79, 0x77, 0x65, 0x6b, 0x31, 0x3f, 0x2d, 0x23, 0x09, 0x07, 0x15, 0x1b),
    /* 9 */ array(0xa1, 0xaf, 0xbd, 0xb3, 0x99, 0x97, 0x85, 0x8b, 0xd1, 0xdf, 0xcd, 0xc3, 0xe9, 0xe7, 0xf5, 0xfb),
    /* a */ array(0x9a, 0x94, 0x86, 0x88, 0xa2, 0xac, 0xbe, 0xb0, 0xea, 0xe4, 0xf6, 0xf8, 0xd2, 0xdc, 0xce, 0xc0),
    /* b */ array(0x7a, 0x74, 0x66, 0x68, 0x42, 0x4c, 0x5e, 0x50, 0x0a, 0x04, 0x16, 0x18, 0x32, 0x3c, 0x2e, 0x20),
    /* c */ array(0xec, 0xe2, 0xf0, 0xfe, 0xd4, 0xda, 0xc8, 0xc6, 0x9c, 0x92, 0x80, 0x8e, 0xa4, 0xaa, 0xb8, 0xb6),
    /* d */ array(0x0c, 0x02, 0x10, 0x1e, 0x34, 0x3a, 0x28, 0x26, 0x7c, 0x72, 0x60, 0x6e, 0x44, 0x4a, 0x58, 0x56),
    /* e */ array(0x37, 0x39, 0x2b, 0x25, 0x0f, 0x01, 0x13, 0x1d, 0x47, 0x49, 0x5b, 0x55, 0x7f, 0x71, 0x63, 0x6d),
    /* f */ array(0xd7, 0xd9, 0xcb, 0xc5, 0xef, 0xe1, 0xf3, 0xfd, 0xa7, 0xa9, 0xbb, 0xb5, 0x9f, 0x91, 0x83, 0x8d),
);


function /* OAES_RET */ oaes_sub_byte(/* uint8_t * */&$byte) {
global $oaes_sub_byte_value;

    #if( NULL == $byte )
#		return OAES_RET_ARG1;


    $_x = $byte ;
    $_y = $byte ;
    $_x &= 0x0f;
    $_y &= 0xf0;
    $_y >>= 4;
   $byte = $oaes_sub_byte_value[$_y][$_x];

#	return OAES_RET_SUCCESS;
}

function /* OAES_RET */ oaes_inv_sub_byte(/* uint8_t * */&$byte) {
    global $oaes_inv_sub_byte_value;
    #size_t _x, _y;
    #if( NULL == byte )
    #	return OAES_RET_ARG1;
    #_x = _y = *byte;

    $_x = $byte ;
    $_y = $byte ;
    $_x &= 0x0f;
    $_y &= 0xf0;
    $_y >>= 4;
    $byte = $oaes_inv_sub_byte_value[$_y][$_x];

    #return OAES_RET_SUCCESS;
}

function/* OAES_RET */ oaes_word_rot_left(/* uint8_t word[OAES_COL_LEN] */array &$word) {
    #uint8_t _temp[OAES_COL_LEN];
    $_temp = array_fill(0, OAES_COL_LEN, 0);

    #if( NULL == $word )
    #	return OAES_RET_ARG1;

    _memcpy($_temp, 0, array_slice($word, 1), 0, OAES_COL_LEN - 1);
    $_temp[OAES_COL_LEN - 1] = $word[0] ;
    _memcpy($word, 0, $_temp, 0, OAES_COL_LEN);

    #return OAES_RET_SUCCESS;
}

function /* OAES_RET */ oaes_shift_rows(/* uint8_t block[OAES_BLOCK_SIZE] */ array &$block) {
    #uint8_t _temp[OAES_BLOCK_SIZE];
    $_temp = array_fill(0, 16, 0);

    #if( NULL == block )
    #	return OAES_RET_ARG1;

    $_temp[0x00] = $block[0x00] ;
    $_temp[0x01] = $block[0x05] ;
    $_temp[0x02] = $block[0x0a] ;
    $_temp[0x03] = $block[0x0f] ;
    $_temp[0x04] = $block[0x04] ;
    $_temp[0x05] = $block[0x09] ;
    $_temp[0x06] = $block[0x0e] ;
    $_temp[0x07] = $block[0x03] ;
    $_temp[0x08] = $block[0x08] ;
    $_temp[0x09] = $block[0x0d] ;
    $_temp[0x0a] = $block[0x02] ;
    $_temp[0x0b] = $block[0x07] ;
    $_temp[0x0c] = $block[0x0c] ;
    $_temp[0x0d] = $block[0x01] ;
    $_temp[0x0e] = $block[0x06] ;
    $_temp[0x0f] = $block[0x0b] ;
   _memcpy($block, 0, $_temp, 0, 16);

    #return OAES_RET_SUCCESS;
}

function /* OAES_RET */ oaes_inv_shift_rows(/* uint8_t block[OAES_BLOCK_SIZE] */ array &$block) {
    #uint8_t _temp[OAES_BLOCK_SIZE];
    $_temp = array_fill(0, OAES_BLOCK_SIZE, 0);

    #if( NULL == block )
    #	return OAES_RET_ARG1;

    $_temp[0x00] = $block[0x00] ;
    $_temp[0x01] = $block[0x0d] ;
    $_temp[0x02] = $block[0x0a] ;
    $_temp[0x03] = $block[0x07] ;
    $_temp[0x04] = $block[0x04] ;
    $_temp[0x05] = $block[0x01] ;
    $_temp[0x06] = $block[0x0e] ;
    $_temp[0x07] = $block[0x0b] ;
    $_temp[0x08] = $block[0x08] ;
    $_temp[0x09] = $block[0x05] ;
    $_temp[0x0a] = $block[0x02] ;
    $_temp[0x0b] = $block[0x0f] ;
    $_temp[0x0c] = $block[0x0c] ;
    $_temp[0x0d] = $block[0x09] ;
    $_temp[0x0e] = $block[0x06] ;
    $_temp[0x0f] = $block[0x03] ;
    _memcpy($block, 0, $_temp, 0, OAES_BLOCK_SIZE);

    #return OAES_RET_SUCCESS;
}

function /* uint8_t */ oaes_gf_mul(/* uint8_t left, uint8_t right */ $left, $right) {
    global $oaes_gf_mul_2, $oaes_gf_mul_3, $oaes_gf_mul_9, $oaes_gf_mul_b, $oaes_gf_mul_d, $oaes_gf_mul_e;
    #size_t _x, _y;
    #_x = _y = left;
	$lf=$left ;
    $_x = $lf;
    $_y = $lf;
    $_x &= 0x0f;
    $_y &= 0xf0;
    $_y >>= 4;

    //$right &= 0xff;
	
    switch ($right) {
        case 0x02:
            return $oaes_gf_mul_2[$_y][$_x];
            break;
        case 0x03:
            return $oaes_gf_mul_3[$_y][$_x];
            break;
        case 0x09:
            return $oaes_gf_mul_9[$_y][$_x];
            break;
        case 0x0b:
            return $oaes_gf_mul_b[$_y][$_x];
            break;
        case 0x0d:
            return $oaes_gf_mul_d[$_y][$_x];
            break;
        case 0x0e:
            return $oaes_gf_mul_e[$_y][$_x];
            break;
        default:
            return $lf;
            break;
    }
}


function /* OAES_RET */ oaes_mix_cols(/* uint8_t word[OAES_COL_LEN] */ array &$word, $off) {
    #uint8_t _temp[OAES_COL_LEN];
    $_temp = array_fill(0, OAES_COL_LEN, 0);

    #if( NULL == word )
    #	return OAES_RET_ARG1;

    $_temp[0] = oaes_gf_mul($word[0 + $off], 0x02) ^ oaes_gf_mul($word[1 + $off], 0x03) ^
            $word[2 + $off] ^ $word[3 + $off];
    $_temp[1] = $word[0 + $off] ^ oaes_gf_mul($word[1 + $off], 0x02) ^
            oaes_gf_mul($word[2 + $off], 0x03) ^ $word[3 + $off];
    $_temp[2] = $word[0 + $off] ^ $word[1 + $off] ^
            oaes_gf_mul($word[2 + $off], 0x02) ^ oaes_gf_mul($word[3 + $off], 0x03);
    $_temp[3] = oaes_gf_mul($word[0 + $off], 0x03) ^ $word[1 + $off] ^
            $word[2 + $off] ^ oaes_gf_mul($word[3 + $off], 0x02);
/*
    $_temp[0] &= 0xff;
    $_temp[1] &= 0xff;
    $_temp[2] &= 0xff;
    $_temp[3] &= 0xff;
*/

    _memcpy($word, $off, $_temp, 0, OAES_COL_LEN);

    #return OAES_RET_SUCCESS;
}

function /* OAES_RET */ oaes_inv_mix_cols(/* uint8_t word[OAES_COL_LEN] */ array &$word, $off) {
    #uint8_t _temp[OAES_COL_LEN];
    $_temp = array_fill(0, OAES_COL_LEN, 0);

    #if( NULL == word )
    #	return OAES_RET_ARG1;

    $_temp[0] = oaes_gf_mul($word[0 + $off], 0x0e) ^ oaes_gf_mul($word[1 + $off], 0x0b) ^
            oaes_gf_mul($word[2 + $off], 0x0d) ^ oaes_gf_mul($word[3 + $off], 0x09);
    $_temp[1] = oaes_gf_mul($word[0 + $off], 0x09) ^ oaes_gf_mul($word[1 + $off], 0x0e) ^
            oaes_gf_mul($word[2 + $off], 0x0b) ^ oaes_gf_mul($word[3 + $off], 0x0d);
    $_temp[2] = oaes_gf_mul($word[0 + $off], 0x0d) ^ oaes_gf_mul($word[1 + $off], 0x09) ^
            oaes_gf_mul($word[2 + $off], 0x0e) ^ oaes_gf_mul($word[3 + $off], 0x0b);
    $_temp[3] = oaes_gf_mul($word[0 + $off], 0x0b) ^ oaes_gf_mul($word[1 + $off], 0x0d) ^
            oaes_gf_mul($word[2 + $off], 0x09) ^ oaes_gf_mul($word[3 + $off], 0x0e);


    $_temp[0] &= 0xff;
    $_temp[1] &= 0xff;
    $_temp[2] &= 0xff;
    $_temp[3] &= 0xff;
    _memcpy($word, $off, $_temp, 0, OAES_COL_LEN);

    #return OAES_RET_SUCCESS;
}

function /* uint32_t */ oaes_get_seed() {
    return time() & 0xffffffff;
}

/* function oaes_key_destroy( oaes_key ** key )
  {
  if( NULL == *key )
  return OAES_RET_SUCCESS;

  if( (*key)->data )
  {
  free( (*key)->data );
  (*key)->data = NULL;
  }

  if( (*key)->exp_data )
  {
  free( (*key)->exp_data );
  (*key)->exp_data = NULL;
  }

  (*key)->data_len = 0;
  (*key)->exp_data_len = 0;
  (*key)->num_keys = 0;
  (*key)->key_base = 0;
  free( *key );
 * key = NULL;

  return OAES_RET_SUCCESS;
  } */

function /* OAES_RET */ oaes_key_expand(OAES_CTX $_ctx) {
    global $oaes_gf_8;
    #size_t _i, _j;
    $_i = 0;
    $_j = 0;

#	oaes_ctx * _ctx = (oaes_ctx *) ctx;
    #if( NULL == _ctx )
    #	return OAES_RET_ARG1;
    #if( NULL == _ctx->key )
    #	return OAES_RET_NOKEY;

    $_ctx->key->key_base = $_ctx->key->data_len / OAES_RKEY_LEN;
    $_ctx->key->num_keys = $_ctx->key->key_base + OAES_ROUND_BASE;

    $_ctx->key->exp_data_len = $_ctx->key->num_keys * OAES_RKEY_LEN * OAES_COL_LEN;
    $_ctx->key->exp_data = array_fill(0, $_ctx->key->exp_data_len, 0);

    #if( NULL == _ctx->key->exp_data )
    #	return OAES_RET_MEM;
    // the first _ctx->key->data_len are a direct copy
    _memcpy($_ctx->key->exp_data, 0, $_ctx->key->data, 0, $_ctx->key->data_len);

    // apply ExpandKey algorithm for remainder
    for ($_i = $_ctx->key->key_base; $_i < $_ctx->key->num_keys * OAES_RKEY_LEN; $_i++) {
        //uint8_t _temp[OAES_COL_LEN];
        $_temp = array_fill(0, OAES_COL_LEN, 0);

        _memcpy($_temp, 0, array_slice($_ctx->key->exp_data, ( $_i - 1 ) * OAES_RKEY_LEN), 0, OAES_COL_LEN);

        // transform key column
        if (0 == ($_i % $_ctx->key->key_base )) {
            oaes_word_rot_left($_temp);

            for ($_j = 0; $_j < OAES_COL_LEN; $_j++)
            #oaes_sub_byte( $_temp + $_j );//????????????????????????????????????????????????????????????????????
                oaes_sub_byte($_temp [$_j]);//????????????????????????????????????????????????????????????????????

            $_temp[0] ^= $oaes_gf_8[($_i / $_ctx->key->key_base) - 1];
        } else if ($_ctx->key->key_base > 6 && 4 == $_i % $_ctx->key->key_base) {
            for ($_j = 0; $_j < OAES_COL_LEN; $_j++)
            #oaes_sub_byte( $_temp + _j );????????????????????????????????????????????
                oaes_sub_byte($_temp [$_j]);
        }

        for ($_j = 0; $_j < OAES_COL_LEN; $_j++) {
            $_ctx->key->exp_data[$_i * OAES_RKEY_LEN + $_j] = $_ctx->key->exp_data[( $_i - $_ctx->key->key_base ) *
                    OAES_RKEY_LEN + $_j] ^ $_temp[$_j];
        }
    }

    #return OAES_RET_SUCCESS;
}

function /* OAES_RET */ oaes_key_gen(OAES_CTX $_ctx, /* size_t */ $key_size) {
    #size_t _i;
    $_i = 0;
    #oaes_key * _key = NULL;
    $_key = new oaes_key();
    #oaes_ctx * _ctx = (oaes_ctx *) ctx;
    #OAES_RET _rc = OAES_RET_SUCCESS;
    #if( NULL == _ctx )
    #	return OAES_RET_ARG1;
    #$_key = (oaes_key *) calloc( sizeof( oaes_key ), 1 );
    #if( NULL == _key )
    #	return OAES_RET_MEM;
    #if($_ctx->key )
    #oaes_key_destroy( $_ctx->key );
    $_ctx->key = NULL;

    $_key->data_len = $key_size;
    $_key->data = array_fill(0, $key_size, 0);

    #if( NULL == _key->data )
    #	return OAES_RET_MEM;

    for ($_i = 0; $_i < $key_size; $_i++)
        $_key->data[$_i] = /* (uint8_t) */ rand(0, 255);

    $_ctx->key = $_key;
    ($_rc = $_rc) || oaes_key_expand($_ctx);

    if ($_rc != OAES_RET_SUCCESS) {
        #oaes_key_destroy( &(_ctx->key) );
        return $_rc;
    }

    #return OAES_RET_SUCCESS;
}

function /* OAES_RET */ oaes_key_gen_128(OAES_CTX $_ctx) {
    return oaes_key_gen($_ctx, 16);
}

function /* OAES_RET */ oaes_key_gen_192(OAES_CTX $ctx) {
    return oaes_key_gen($ctx, 24);
}

function oaes_key_gen_256(OAES_CTX $ctx) {
    return oaes_key_gen($ctx, 32);
}

function /* OAES_RET */ oaes_key_export(OAES_CTX $_ctx,
 /* uint8_t * */ array &$data, /* size_t * */ &$data_len) {
    global $oaes_header;
    $_data_len_in = 0;
    #oaes_ctx * _ctx = (oaes_ctx *) ctx;
    #if( NULL == _ctx )
    #	return OAES_RET_ARG1;
    #if( NULL == _ctx->key )
    #	return OAES_RET_NOKEY;
    #if( NULL == data_len )
    #	return OAES_RET_ARG3;

    $_data_len_in = $data_len;
    // data + header
    $data_len = $_ctx->key->data_len + OAES_BLOCK_SIZE;

    #if( NULL == data )
    #	return OAES_RET_SUCCESS;
    #if( _data_len_in < *data_len )
    #	return OAES_RET_BUF;
    // header
    _memcpy($data, 0, $oaes_header, 0, OAES_BLOCK_SIZE);
    $data[5] = 0x01;
    $data[7] = $_ctx->key->data_len;
    _memcpy($data, OAES_BLOCK_SIZE, $_ctx->key->data, 0, $_ctx->key->data_len);

    #return OAES_RET_SUCCESS;
}

/*
  function /* OAES_RET * / oaes_key_export_data(OAES_CTX $_ctx, array &$data, &$data_len) {
  #size_t _data_len_in;
  #oaes_ctx * _ctx = (oaes_ctx *) ctx;
  #if( NULL == _ctx )
  #	return OAES_RET_ARG1;
  #if( NULL == _ctx->key )
  #	return OAES_RET_NOKEY;
  #if( NULL == data_len )
  #	return OAES_RET_ARG3;

  $_data_len_in = $data_len;
  $data_len = $_ctx->key->data_len;

  #if( NULL == data )
  #	return OAES_RET_SUCCESS;
  #if( _data_len_in < *data_len )
  #	return OAES_RET_BUF;

  _memcpy($data, 0, $_ctx->key->data, 0, $data_len);

  #return OAES_RET_SUCCESS;
  }
 */
/*
  function  oaes_key_import( OAES_CTX $_ctx,
  /*const uint8_t * * / array $data,&$data_len )
  {
  #oaes_ctx * _ctx = (oaes_ctx *) ctx;
  #OAES_RET _rc = OAES_RET_SUCCESS;
  $_key_length = 0;

  #if( NULL == _ctx )
  #	return OAES_RET_ARG1;

  #if( NULL == data )
  #	return OAES_RET_ARG2;

  switch( $data_len )
  {
  case 16 + OAES_BLOCK_SIZE:
  case 24 + OAES_BLOCK_SIZE:
  case 32 + OAES_BLOCK_SIZE:
  break;
  default:
  return OAES_RET_ARG3;
  }

  // header
  if( 0 != memcmp( data, oaes_header, 4 ) )
  return OAES_RET_HEADER;

  // header version
  switch( data[4] )
  {
  case 0x01:
  break;
  default:
  return OAES_RET_HEADER;
  }

  // header type
  switch( data[5] )
  {
  case 0x01:
  break;
  default:
  return OAES_RET_HEADER;
  }

  // options
  _key_length = data[7];
  switch( _key_length )
  {
  case 16:
  case 24:
  case 32:
  break;
  default:
  return OAES_RET_HEADER;
  }

  if( (int)data_len != _key_length + OAES_BLOCK_SIZE )
  return OAES_RET_ARG3;

  if( _ctx->key )
  oaes_key_destroy( &(_ctx->key) );

  _ctx->key = (oaes_key *) calloc( sizeof( oaes_key ), 1 );

  if( NULL == _ctx->key )
  return OAES_RET_MEM;

  _ctx->key->data_len = _key_length;
  _ctx->key->data = (uint8_t *)
  calloc( _key_length, sizeof( uint8_t ));

  if( NULL == _ctx->key->data )
  {
  oaes_key_destroy( &(_ctx->key) );
  return OAES_RET_MEM;
  }

  memcpy( _ctx->key->data, data + OAES_BLOCK_SIZE, _key_length );
  _rc = _rc || oaes_key_expand( ctx );

  if( _rc != OAES_RET_SUCCESS )
  {
  oaes_key_destroy( &(_ctx->key) );
  return _rc;
  }

  return OAES_RET_SUCCESS;
  }
 */

function /* OAES_RET */ oaes_key_import_data(OAES_CTX $_ctx,
 /* const uint8_t * */ array $data, &$data_len) {
    #oaes_ctx * _ctx = (oaes_ctx *) ctx;
    #OAES_RET _rc = OAES_RET_SUCCESS;
    #if( NULL == _ctx )
    #	return OAES_RET_ARG1;
    #if( NULL == data )
    #	return OAES_RET_ARG2;

    switch ($data_len) {
        case 16:
        case 24:
        case 32:
            break;
        default:
            return OAES_RET_ARG3;
    }

    #if( $_ctx->key )
    #oaes_key_destroy( &(_ctx->key) );

    $_ctx->key = new oaes_key(); #(oaes_key *) calloc( sizeof( oaes_key ), 1 );
    #if( NULL == _ctx->key )
    #	return OAES_RET_MEM;

    $_ctx->key->data_len = $data_len;
    $_ctx->key->data = array_fill(0, $data_len, 0);

    #if( NULL == _ctx->key->data )
    #{
    #	oaes_key_destroy( &(_ctx->key) );
    #	return OAES_RET_MEM;
    #}

    _memcpy($_ctx->key->data, 0, $data, 0, $data_len);
    #($_rc = $_rc) || 
    oaes_key_expand($_ctx);

    #if( _rc != OAES_RET_SUCCESS )
    #{
    #	oaes_key_destroy( &(_ctx->key) );
    #	return _rc;
    #}
    #return OAES_RET_SUCCESS;
}

function /* OAES_CTX * */ oaes_alloc() {
    $_ctx = new oaes_ctx();

    #if( NULL == _ctx )
    #	return NULL;

    srand(oaes_get_seed());

    $_ctx->key = NULL;
    //oaes_set_option($_ctx, OAES_OPTION_CBC, NULL);

    #return (OAES_CTX *) _ctx;
    return $_ctx;
}

/*
  function /*OAES_RET* / oaes_free( OAES_CTX ** ctx )
  {
  oaes_ctx ** _ctx = (oaes_ctx **) ctx;

  if( NULL == _ctx )
  return OAES_RET_ARG1;

  if( NULL == *_ctx )
  return OAES_RET_SUCCESS;

  if( (*_ctx)->key )
  oaes_key_destroy( &((*_ctx)->key) );

  free( *_ctx );
 * _ctx = NULL;

  return OAES_RET_SUCCESS;
  } */
/*
  function OAES_RET oaes_set_option( OAES_CTX * ctx,
  OAES_OPTION option, const void * value )
  {
  size_t _i;
  oaes_ctx * _ctx = (oaes_ctx *) ctx;

  if( NULL == _ctx )
  return OAES_RET_ARG1;

  switch( option )
  {
  case OAES_OPTION_ECB:
  _ctx->options &= ~OAES_OPTION_CBC;
  memset( _ctx->iv, 0, OAES_BLOCK_SIZE );
  break;

  case OAES_OPTION_CBC:
  _ctx->options &= ~OAES_OPTION_ECB;
  if( value )
  memcpy( _ctx->iv, value, OAES_BLOCK_SIZE );
  else
  {
  for( _i = 0; _i < OAES_BLOCK_SIZE; _i++ )
  _ctx->iv[_i] = (uint8_t) rand();
  }
  break;

  default:
  return OAES_RET_ARG2;
  }

  _ctx->options |= option;

  return OAES_RET_SUCCESS;
  }
 */

function /* OAES_RET */ oaes_encrypt_block(
OAES_CTX $_ctx, /* uint8_t * */ array $c, $c_len) {
    $_i = 0;
    $_j = 0;
    #oaes_ctx * _ctx = (oaes_ctx *) ctx;
    #if( NULL == _ctx )
    #	return OAES_RET_ARG1;
    #if( NULL == c )
    #	return OAES_RET_ARG2;
    #if( c_len != OAES_BLOCK_SIZE )
    #	return OAES_RET_ARG3;
    #if( NULL == _ctx->key )
    #	return OAES_RET_NOKEY;
    // AddRoundKey(State, K0)
    for ($_i = 0; $_i < $c_len; $_i++)
        $c[$_i] = $c[$_i] ^ $_ctx->key->exp_data[$_i];

    // for round = 1 step 1 to Nr–1
    for ($_i = 1; $_i < $_ctx->key->num_keys - 1; $_i++) {
        // SubBytes(state)
        for ($_j = 0; $_j < $c_len; $_j++)
            oaes_sub_byte($c[$_j]);

        // ShiftRows(state)
        oaes_shift_rows($c);

        // MixColumns(state)
        oaes_mix_cols($c, 0);
        oaes_mix_cols($c, 4);
        oaes_mix_cols($c, 8);
        oaes_mix_cols($c, 12);

        // AddRoundKey(state, w[round*Nb, (round+1)*Nb-1])
        for ($_j = 0; $_j < $c_len; $_j++)
            $c[$_j] ^= $_ctx->key->exp_data[$_i * OAES_RKEY_LEN * OAES_COL_LEN + $_j];
    }

    // SubBytes(state)
    for ($_i = 0; $_i < $c_len; $_i++)
        oaes_sub_byte($c [$_i]);

    // ShiftRows(state)
    oaes_shift_rows($c);

    // AddRoundKey(state, w[Nr*Nb, (Nr+1)*Nb-1])
    for ($_i = 0; $_i < $c_len; $_i++)
        $c[$_i] ^= $_ctx->key->exp_data[
                ( $_ctx->key->num_keys - 1 ) * OAES_RKEY_LEN * OAES_COL_LEN + $_i];

    #return OAES_RET_SUCCESS;
}

function /* OAES_RET */ oaes_decrypt_block(
OAES_CTX $_ctx, /* uint8_t * */ $c, /* size_t */ $c_len) {
    #size_t _i, _j;
    #oaes_ctx * _ctx = (oaes_ctx *) ctx;
    #if( NULL == _ctx )
    #	return OAES_RET_ARG1;
    #if( NULL == c )
    #	return OAES_RET_ARG2;
    #if( c_len != OAES_BLOCK_SIZE )
    #	return OAES_RET_ARG3;
    #if( NULL == _ctx->key )
    #	return OAES_RET_NOKEY;
    // AddRoundKey(state, w[Nr*Nb, (Nr+1)*Nb-1])
    for ($_i = 0; $_i < $c_len; $_i++)
        $c[$_i] ^= $_ctx->key->exp_data[
                ( $_ctx->key->num_keys - 1 ) * OAES_RKEY_LEN * OAES_COL_LEN + $_i];

    for ($_i = $_ctx->key->num_keys - 2; $_i > 0; $_i--) {
        // InvShiftRows(state)
        oaes_inv_shift_rows($c);

        // InvSubBytes(state)
        for ($_j = 0; $_j < $c_len; $_j++)
            oaes_inv_sub_byte($c [$_j]);

        // AddRoundKey(state, w[round*Nb, (round+1)*Nb-1])
        for ($_j = 0; $_j < $c_len; $_j++)
            $c[$_j] ^= $_ctx->key->exp_data[$_i * OAES_RKEY_LEN * OAES_COL_LEN + $_j];

        // InvMixColums(state)
        oaes_inv_mix_cols($c, 0);
        oaes_inv_mix_cols($c, 4);
        oaes_inv_mix_cols($c, 8);
        oaes_inv_mix_cols($c, 12);
    }

    // InvShiftRows(state)
    oaes_inv_shift_rows($c);

    // InvSubBytes(state)
    for ($_i = 0; $_i < $c_len; $_i++)
        oaes_inv_sub_byte($c [$_i]);

    // AddRoundKey(state, w[0, Nb-1])
    for ($_i = 0; $_i < $c_len; $_i++)
        $c[$_i] ^= $_ctx->key->exp_data[$_i];

    #return OAES_RET_SUCCESS;
}

/*
  function /*OAES_RET* / oaes_encrypt( OAES_CTX $_ctx,
  /*const uint8_t ** / array &$m, /*size_t* / $m_len, /*uint8_t ** / array &$c, /*size_t * * /&$c_len )
  {
  #size_t _i, _j, _c_len_in, _c_data_len;
  $_pad_len = $m_len % OAES_BLOCK_SIZE == 0 ?
  0 : (OAES_BLOCK_SIZE - $m_len % OAES_BLOCK_SIZE);
  #oaes_ctx * _ctx = (oaes_ctx *) ctx;
  #OAES_RET _rc = OAES_RET_SUCCESS;
  $_flags = $_pad_len ? OAES_FLAG_PAD : 0;

  #if( NULL == _ctx )
  #	return OAES_RET_ARG1;

  #if( NULL == m )
  #	return OAES_RET_ARG2;

  #if( NULL == c_len )
  #	return OAES_RET_ARG5;

  $_c_len_in = $c_len;
  // data + pad
  $_c_data_len = $m_len + $_pad_len;
  // header + iv + data + pad
  $c_len = 2 * OAES_BLOCK_SIZE + $m_len + $_pad_len;

  #if( NULL == c )
  #	return OAES_RET_SUCCESS;

  #if( _c_len_in < *c_len )
  #	return OAES_RET_BUF;

  #if( NULL == _ctx->key )
  #	return OAES_RET_NOKEY;

  // header
  _memcpy($c, 0,$oaes_header,0, OAES_BLOCK_SIZE );
  #memcpy($c, 6, $_ctx->options,0, sizeof(_ctx->options));
  //TODO set two bytes of options (uint16_T)
  memcpy($c , 8, $_flags, sizeof(_flags));
  // iv
  memcpy(c + OAES_BLOCK_SIZE, _ctx->iv, OAES_BLOCK_SIZE );
  // data
  memcpy(c + 2 * OAES_BLOCK_SIZE, m, m_len );

  for( _i = 0; _i < _c_data_len; _i += OAES_BLOCK_SIZE )
  {
  uint8_t _block[OAES_BLOCK_SIZE];
  size_t _block_size = min( m_len - _i, OAES_BLOCK_SIZE );

  memcpy( _block, c + 2 * OAES_BLOCK_SIZE + _i, _block_size );

  // insert pad
  for( _j = 0; _j < OAES_BLOCK_SIZE - _block_size; _j++ )
  _block[ _block_size + _j ] = _j + 1;

  // CBC
  if( _ctx->options & OAES_OPTION_CBC )
  {
  for( _j = 0; _j < OAES_BLOCK_SIZE; _j++ )
  _block[_j] = _block[_j] ^ _ctx->iv[_j];
  }

  _rc = _rc ||
  oaes_encrypt_block( ctx, _block, OAES_BLOCK_SIZE );
  memcpy( c + 2 * OAES_BLOCK_SIZE + _i, _block, OAES_BLOCK_SIZE );

  if( _ctx->options & OAES_OPTION_CBC )
  memcpy( _ctx->iv, _block, OAES_BLOCK_SIZE );
  }

  return _rc;
  }

  function OAES_RET oaes_decrypt( OAES_CTX * ctx,
  const uint8_t * c, size_t c_len, uint8_t * m, size_t * m_len )
  {
  size_t _i, _j, _m_len_in;
  oaes_ctx * _ctx = (oaes_ctx *) ctx;
  OAES_RET _rc = OAES_RET_SUCCESS;
  uint8_t _iv[OAES_BLOCK_SIZE];
  uint8_t _flags;
  OAES_OPTION _options;

  if( NULL == ctx )
  return OAES_RET_ARG1;

  if( NULL == c )
  return OAES_RET_ARG2;

  if( c_len % OAES_BLOCK_SIZE )
  return OAES_RET_ARG3;

  if( NULL == m_len )
  return OAES_RET_ARG5;

  _m_len_in = *m_len;
 * m_len = c_len - 2 * OAES_BLOCK_SIZE;

  if( NULL == m )
  return OAES_RET_SUCCESS;

  if( _m_len_in < *m_len )
  return OAES_RET_BUF;

  if( NULL == _ctx->key )
  return OAES_RET_NOKEY;

  // header
  if( 0 != memcmp( c, oaes_header, 4 ) )
  return OAES_RET_HEADER;

  // header version
  switch( c[4] )
  {
  case 0x01:
  break;
  default:
  return OAES_RET_HEADER;
  }

  // header type
  switch( c[5] )
  {
  case 0x02:
  break;
  default:
  return OAES_RET_HEADER;
  }

  // options
  memcpy(&_options, c + 6, sizeof(_options));
  // validate that all options are valid
  if( _options & ~(
  OAES_OPTION_ECB
  | OAES_OPTION_CBC
  #ifdef OAES_DEBUG
  | OAES_OPTION_STEP_ON
  | OAES_OPTION_STEP_OFF
  #endif // OAES_DEBUG
  ) )
  return OAES_RET_HEADER;
  if( ( _options & OAES_OPTION_ECB ) &&
  ( _options & OAES_OPTION_CBC ) )
  return OAES_RET_HEADER;
  if( _options == OAES_OPTION_NONE )
  return OAES_RET_HEADER;

  // flags
  memcpy(&_flags, c + 8, sizeof(_flags));
  // validate that all flags are valid
  if( _flags & ~(
  OAES_FLAG_PAD
  ) )
  return OAES_RET_HEADER;

  // iv
  memcpy( _iv, c + OAES_BLOCK_SIZE, OAES_BLOCK_SIZE);
  // data + pad
  memcpy( m, c + 2 * OAES_BLOCK_SIZE, *m_len );

  for( _i = 0; _i < *m_len; _i += OAES_BLOCK_SIZE )
  {
  if( ( _options & OAES_OPTION_CBC ) && _i > 0 )
  memcpy( _iv, c + OAES_BLOCK_SIZE + _i, OAES_BLOCK_SIZE );

  _rc = _rc ||
  oaes_decrypt_block( ctx, m + _i, min( *m_len - _i, OAES_BLOCK_SIZE ) );

  // CBC
  if( _options & OAES_OPTION_CBC )
  {
  for( _j = 0; _j < OAES_BLOCK_SIZE; _j++ )
  m[ _i + _j ] = m[ _i + _j ] ^ _iv[_j];
  }
  }

  // remove pad
  if( _flags & OAES_FLAG_PAD )
  {
  int _is_pad = 1;
  size_t _temp = (size_t) m[*m_len - 1];

  if( _temp  <= 0x00 || _temp > 0x0f )
  return OAES_RET_HEADER;
  for( _i = 0; _i < _temp; _i++ )
  if( m[*m_len - 1 - _i] != _temp - _i )
  _is_pad = 0;
  if( _is_pad )
  {
  memset( m + *m_len - _temp, 0, _temp );
 * m_len -= _temp;
  }
  else
  return OAES_RET_HEADER;
  }

  return OAES_RET_SUCCESS;
  }
 */
/*
  function OAES_API OAES_RET oaes_encryption_round( const uint8_t * key, uint8_t * c )
  {
  size_t _i;

  if( NULL == key )
  return OAES_RET_ARG1;

  if( NULL == c )
  return OAES_RET_ARG2;

  // SubBytes(state)
  for( _i = 0; _i < OAES_BLOCK_SIZE; _i++ )
  oaes_sub_byte( c + _i );

  // ShiftRows(state)
  oaes_shift_rows( c );

  // MixColumns(state)
  oaes_mix_cols( c );
  oaes_mix_cols( c + 4 );
  oaes_mix_cols( c + 8 );
  oaes_mix_cols( c + 12 );

  // AddRoundKey(State, key)
  for( _i = 0; _i < OAES_BLOCK_SIZE; _i++ )
  c[_i] ^= key[_i];

  return OAES_RET_SUCCESS;
  }

  function OAES_API OAES_RET oaes_pseudo_encrypt_ecb( OAES_CTX * ctx, uint8_t * c )
  {
  size_t _i;
  oaes_ctx * _ctx = (oaes_ctx *) ctx;

  if( NULL == _ctx )
  return OAES_RET_ARG1;

  if( NULL == c )
  return OAES_RET_ARG2;

  if( NULL == _ctx->key )
  return OAES_RET_NOKEY;

  for ( _i = 0; _i < 10; ++_i )
  {
  oaes_encryption_round( &_ctx->key->exp_data[_i * OAES_RKEY_LEN * OAES_COL_LEN], c );
  }

  return OAES_RET_SUCCESS;
  } */

